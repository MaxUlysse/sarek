nextflow_pipeline {

    name "default"
    script "main.nf"

    test("Should run without failures") {
        when {
            params {
                outdir = baseDir.toURI().relativize(outputDir.toURI()).toString()
            }
        }

        then {
            assert path("$outputDir/multiqc").exists()

            // Removed once snapshots are fixed
            assert path("$outputDir/csv/markduplicates.csv").exists()
            assert path("$outputDir/csv/markduplicates_no_table.csv").exists()
            assert path("$outputDir/csv/recalibrated.csv").exists()
            assert path("$outputDir/csv/variantcalled.csv").exists()

            assert workflow.success

            assert snapshot(workflow).match()

            assert snapshot(workflow.trace.tasks().size()).match()
            assert snapshot(
                "$outputDir/preprocessing/recal_table/test/test.recal.table",
                "$outputDir/reports/mosdepth/test/test.md.mosdepth.global.dist.txt",
                "$outputDir/reports/mosdepth/test/test.md.mosdepth.region.dist.txt",
                "$outputDir/reports/mosdepth/test/test.md.mosdepth.summary.txt",
                "$outputDir/reports/mosdepth/test/test.md.regions.bed.gz",
                "$outputDir/reports/mosdepth/test/test.md.regions.bed.gz.csi",
                "$outputDir/reports/mosdepth/test/test.recal.mosdepth.global.dist.txt",
                "$outputDir/reports/mosdepth/test/test.recal.mosdepth.region.dist.txt",
                "$outputDir/reports/mosdepth/test/test.recal.mosdepth.summary.txt",
                "$outputDir/reports/mosdepth/test/test.recal.regions.bed.gz",
                "$outputDir/reports/mosdepth/test/test.recal.regions.bed.gz.csi",
                "$outputDir/reports/vcftools/strelka/test/test.strelka.variants.FILTER.summary",
                "$outputDir/reports/vcftools/strelka/test/test.strelka.variants.TsTv.count",
                "$outputDir/reports/vcftools/strelka/test/test.strelka.variants.TsTv.qual"
            ).match()
        }
    }
}
